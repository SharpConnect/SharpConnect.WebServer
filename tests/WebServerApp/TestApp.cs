//MIT, 2015-present, EngineKit

using SharpConnect.WebServers;
namespace SharpConnect
{
    class TestApp
    {
        //test cross origin policy 1
        static CrossOriginPolicy crossOriginPolicy = new CrossOriginPolicy(AllowCrossOrigin.All, "*");
        static TestApp()
        {

            //eg.
            //stBuilder.Append("Access-Control-Allow-Methods: GET, POST\r\n");
            //stBuilder.Append("Access-Control-Allow-Headers: Content-Type\r\n");
            crossOriginPolicy.AllowHeaders = "Content-Type";
            crossOriginPolicy.AllowMethods = "GET, POST";
        }

        const string html = @"<html>
                <head>
                <script> 
                         
                       
                </script>                
                </head>
                <body>
                        hello-websocket
	                    <input type=""button"" id=""mytxt"" onclick=""send_data('hello')""></input>	
                        <div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
                       <div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>

                       <div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
                       <div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div><div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>AAA</div>
<div>ZZZZ</div>
                </body>    
        </html>";
        public void HandleRequest(HttpRequest req, HttpResponse resp)
        {             
            switch (req.Path)
            {
                case "/":
                    {
                        resp.TransferEncoding = ResponseTransferEncoding.Chunked;
                        resp.End("hello!");
                    }
                    break;
                case "/websocket":
                    {
                        resp.ContentType = WebResponseContentType.TextHtml;
                        resp.End(html);
                    }
                    break;
                case "/version":
                    {
                        resp.End("1.0");
                    }
                    break;
                case "/cross":
                    {
                        resp.AllowCrossOriginPolicy = crossOriginPolicy;
                        resp.End("ok");
                    }
                    break;
                default:
                    {
                        resp.End("");
                    }
                    break;
            }
        }
        int count = 0;
        public void HandleWebSocket(WebSocketRequest req, WebSocketResponse resp)
        {

            if (req.OpCode == Opcode.Text)
            {
                string clientMsg = req.ReadAsString();

                if (clientMsg == null)
                {
                    resp.Write("");
                    return;
                }

                string serverMsg = null;
                if (clientMsg.StartsWith("LOOPBACK"))
                {
                    serverMsg = "from SERVER " + clientMsg;
                }
                else
                {
                    serverMsg = "server:" + (count++);
                }

                resp.Write(serverMsg);
#if DEBUG
                System.Diagnostics.Debug.WriteLine(serverMsg);
#endif
            }
            else if (req.OpCode == Opcode.Binary)
            {
                //this is binary data
                byte[] binaryData = req.ReadAsBinary();
#if DEBUG
                count++;
                string serverMsg = count + " binary_len" + binaryData.Length;
                System.Diagnostics.Debug.WriteLine(serverMsg);
                resp.Write(serverMsg);
#endif
            }

        }
    }
}